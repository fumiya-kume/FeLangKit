{
  "url": "https://github.com/fumiya-kume/FeLangKit/issues/64",
  "owner": "fumiya-kume",
  "repo": "FeLangKit",
  "issue_number": 64,
  "title": "Set up basic visitor pattern infrastructure",
  "body": "## Overview\n\nFeLangKit needs a visitor pattern infrastructure to enable clean, maintainable AST traversal for both `Expression` and `Statement` types. Currently, each module that processes ASTs implements its own traversal logic with repetitive switch statements.\n\n## Problem\n\n**Current State Issues:**\n- `PrettyPrinter` contains 387 lines of manual switch-case traversal logic\n- `SemanticAnalyzer` is empty awaiting implementation  \n- Future code generators will duplicate the same traversal patterns\n- Adding new AST node types requires updating multiple switch statements across modules\n- Third-party extensions cannot easily add AST processing capabilities\n\n## Goals\n\n**Primary Objectives:**\n- âœ… Implement type-safe visitor pattern for Expression and Statement ASTs\n- âœ… Enable clean separation of concerns between AST structure and processing logic\n- âœ… Support both mutable and immutable visitors for different use cases\n- âœ… Maintain Swift's value semantics and thread safety (`@Sendable` compliance)\n- âœ… Zero breaking changes to existing `Expression` and `Statement` APIs\n\n## Solution Approach\n\n**Function-Based Visitor Pattern** using closure-based dispatch:\n\n```swift\npublic struct ExpressionVisitor<Result> {\n    public var visitLiteral: (Literal) -> Result\n    public var visitIdentifier: (String) -> Result\n    public var visitBinary: (BinaryOperator, Expression, Expression) -> Result\n    // ... other visit methods\n    \n    public func visit(_ expression: Expression) -> Result\n}\n```\n\n**Benefits:**\n- No modifications to existing AST enums required\n- Swift-idiomatic with powerful enum pattern matching\n- Maximum flexibility for specialized visitors\n- Easy testing and composition\n- Future-proof for AST extensions\n\n## Implementation Plan\n\nThis issue tracks the overall epic. Implementation details and phases are documented in:\n\n- **ðŸ“‹ [Design Document #65](https://github.com/fumiya-kume/FeLangKit/issues/65)** - Complete architectural analysis and implementation strategy\n- **ðŸš€ [Phase 1 Implementation #67](https://github.com/fumiya-kume/FeLangKit/issues/67)** - Core `ExpressionVisitor` and `StatementVisitor` infrastructure\n\n## Success Criteria\n\n- [ ] Core visitor infrastructure implemented (`ExpressionVisitor<Result>`, `StatementVisitor<Result>`)\n- [ ] `PrettyPrinter` successfully refactored to use visitor pattern  \n- [ ] `SemanticAnalyzer` skeleton implemented with visitor-based traversal\n- [ ] Comprehensive test suite with performance validation (<5% overhead vs. switch statements)\n- [ ] Documentation and migration guide completed\n- [ ] Zero breaking changes to existing APIs\n\n## Related Work\n\n**Dependencies:**\n- Must work with existing `Expression` enum (no modifications)\n- Must work with existing `Statement` enum (no modifications)\n- Must maintain `@Sendable` compliance for thread safety\n- Must integrate with existing `SymbolTable` and error reporting\n\n**Follow-up Opportunities:**\n- AST optimization passes using visitor infrastructure\n- Code generation backends  \n- Language server protocol integration\n- Static analysis and linting tools\n\n---\n\n**Status**: Ready for implementation  \n**Priority**: High - blocks semantic analysis and code generation work  \n**Complexity**: Medium-High  \n**Estimated Effort**: 2-3 weeks across multiple phases",
  "state": "open",
  "labels": [],
  "assignees": [
    "fumiya-kume"
  ],
  "milestone": null,
  "created_at": "2025-05-26T00:30:18Z",
  "updated_at": "2025-05-26T10:14:26Z",
  "author": "fumiya-kume",
  "branch_name": "issue-64-20250529",
  "pr_title": "Resolve #64: Set up basic visitor pattern infrastructure"
}
